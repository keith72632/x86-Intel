x86 Intel Assembly Language

Registers
	-scratch pad or "working memory". Load data in temporarily
	-general purpose and special registers
	-Registers have fixed width. usually 32 bits or 64 bits
	-registers have subsets, which means 32bit can run on 64bit
Stack
	-LIFO Last In First Out
	-pushing puts on top, pop takes off top
	-this is accomplished by moving stack pointer which is has RAM
Tools
	-assembler with nasm
	-
Commands
	-first two lines entry point
	-global makes file available to linker
	-int= transfers process control to interrupt handler
		-the type of system call depends on eax register
		-eax 1 means system exit call
		-ebx stores exit status 
	-sub= subtractions
Command Line
	-assemble= nasm -f elf32 ex1.asm -o ex1.o
	-link= ld -m elf_i386 ex1.0 ex1
Operands
	-
*0x0a is hex for the \n character
*equ is like = but immutable

Jump Instructions
	-intrauction poiter = EIP
		-location of exectution. Jump around to different points in code
	-ip is changed by jump instruction
	-jump <label>
	-jl <label> if flag after cmp set to less than
	-je= jump if equal
	-jne= jump not equal
Loops
	-dec= decrement
Memory Access

Keywords
	-db = byte
	-dw = two bytes
	-dd = 4 byte 'word'
The Stack
	-LIFO
	-push puts 'on top'
	-pop takes from top
	-the stack is just an array
	-ESP is stack pointer
	-EBP is a base pointer used to presevre locations on the stack
	-stack pointer starts at high address and moves down with pushes
	-when pushed, ESP decreased by 4
	-sub 4 from esp will move stack pointer one address
		-or mov [esp], dword 357
		-dword tells nasm four bytes
	-pop <register> will move value where stack pointer is into register, then move esp 
	by 4 bytes
	-do same thing as pop by:
		-mov eax, dword [esp]
		-add esp, 4
Functions
	-Can write functions for C and call functions for C
	-Call=Push EIP (instruction pointer onto stack) performs jump
	-ret= return. this is short for above
	-perserve stack using base point, ebp
		-ebp holds where the top of stack was 
		-call before ret
		-then mov esp, ebp, affectivly deallocated space
		-to perserve value of ebp, push to stack first and pop ebp back before return
	-ALWAYS PUSH EBP WHEN ENTERING FUNCTION AND POP WHEN EXITING
		-push is prologue and pop is epiloqgue
C Functions
	-global main takes the place of start
	-extern printf brings in C function
	-assemble like normal, but link with gcc
		-$gcc -m32 OBJECT.FILE -o EX.FILE
***Caller who puts arguments onto stack must remove them
Creating a C function
	-create a function in asm and assemble an object file like normal
	-create a header file and add function. list system arguments
	-include header file in C program
	-compile C file like:
		-$gcc -m32 <asm_object_file> <C file> -o <exectuable>

